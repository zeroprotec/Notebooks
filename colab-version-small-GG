{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zeroprotec/Notebooks/blob/main/colab-version-small-GG\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yww-GRpwPa1K"
      },
      "source": [
        "<center> <h1> COLAB - Versi√≥n Small</h1> </center>\n",
        "\n",
        "#### A ra√≠z de los constantes baneos y desconexiones del servicio de Colab, he montado este. Sus funciones son un poco m√°s limitadas a la hora de iniciar SD para evitar suspensiones. Si encuentra alguna anomal√≠a, no dude en comunicarse conmigo. Agradezco su apoyo y sugerencias.\n",
        "\n",
        "[![General Gost - #1665](https://img.shields.io/badge/General_Gost-%231665-5865F2?logo=discord&logoColor=5865F2)](https://lookup.guru/713503476176650241)\n",
        "[![!@Luminesco](https://img.shields.io/badge/%40Luminesco-008abe?logo=Twitter&logoColor=00DAFF)](https://twitter.com/Luminesco_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "DyC6nLYvM5ri",
        "outputId": "ef28d68b-f47f-40cc-ecb3-bdf78b2226f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üöÄ Descargando SD modificado por Generalgost... Por favor, no detengas este proceso bajo ninguna circunstancia...\n",
            "üèÅ Descarga Completada.\n",
            "/content/sdf_web\n",
            "\u001b[91m ‚ö†Ô∏è Fast start is active, please disable it if you have any problem!\u001b[0m\n",
            "2023-09-10 22:50:00.863258: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n",
            "No module 'xformers'. Proceeding without it.\n",
            "Warning: caught exception 'Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx', memory monitor disabled\n",
            "Config file created.\n",
            "\u001b[1m[\u001b[0m-\u001b[1m]\u001b[0m ADetailer initialized. version: \u001b[1;36m23.7\u001b[0m.\u001b[1;36m5\u001b[0m, num models: \u001b[1;36m9\u001b[0m\n",
            "[AddNet] Updating model hashes...\n",
            "0it [00:00, ?it/s]\n",
            "[AddNet] Updating model hashes...\n",
            "0it [00:00, ?it/s]\n",
            "2023-09-10 22:50:24,116 - ControlNet - \u001b[0;32mINFO\u001b[0m - ControlNet v1.1.232\n",
            "ControlNet preprocessor location: /content/sdf_web/extensions/sd-webui-controlnet/annotator/downloads\n",
            "2023-09-10 22:50:24,801 - ControlNet - \u001b[0;32mINFO\u001b[0m - ControlNet v1.1.232\n",
            "*** Error loading script: tntn_tunnel.py\n",
            "    Traceback (most recent call last):\n",
            "      File \"/content/sdf_web/modules/scripts.py\", line 382, in load_scripts\n",
            "        script_module = script_loading.load_module(scriptfile.path)\n",
            "      File \"/content/sdf_web/modules/script_loading.py\", line 10, in load_module\n",
            "        module_spec.loader.exec_module(module)\n",
            "      File \"<frozen importlib._bootstrap_external>\", line 883, in exec_module\n",
            "      File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\n",
            "      File \"/content/sdf_web/extensions/sd-webui-tunnels/scripts/tntn_tunnel.py\", line 2, in <module>\n",
            "        from tntn import bore, jprq\n",
            "    ModuleNotFoundError: No module named 'tntn'\n",
            "\n",
            "---\n",
            "Checkpoint  not found; loading fallback Gostfeit_v3.safetensors\n",
            "/content/sdf_web/extensions/--sd-webui-ar-plus/scripts/sd-webui-ar.py:448: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  arc_calc_height = gr.Button(value=\"Calculate Height\").style(\n",
            "/content/sdf_web/extensions/--sd-webui-ar-plus/scripts/sd-webui-ar.py:448: GradioDeprecationWarning: Use `scale` in place of full_width in the constructor. scale=1 will make the button expand, whereas 0 will not.\n",
            "  arc_calc_height = gr.Button(value=\"Calculate Height\").style(\n",
            "/content/sdf_web/extensions/--sd-webui-ar-plus/scripts/sd-webui-ar.py:456: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  arc_calc_width = gr.Button(value=\"Calculate Width\").style(\n",
            "/content/sdf_web/extensions/--sd-webui-ar-plus/scripts/sd-webui-ar.py:456: GradioDeprecationWarning: Use `scale` in place of full_width in the constructor. scale=1 will make the button expand, whereas 0 will not.\n",
            "  arc_calc_width = gr.Button(value=\"Calculate Width\").style(\n",
            "/content/sdf_web/extensions/sd-webui-controlnet/scripts/controlnet_ui/controlnet_ui_group.py:165: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  with gr.Row(elem_classes=[\"cnet-image-row\"]).style(equal_height=True):\n",
            "/content/sdf_web/extensions/sd-webui-controlnet/scripts/controlnet_ui/controlnet_ui_group.py:179: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  self.generated_image = gr.Image(\n",
            "Calculating sha256 for /content/sdf_web/models/Stable-diffusion/Gostfeit_v3.safetensors: Init / preset error.\n",
            "/content/sdf_web/extensions/sd-webui-regional-prompter/scripts/rp.py:86: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  areasimg = gr.Image(type=\"pil\", show_label  = False).style(height=256,width=256)\n",
            "/content/sdf_web/extensions/stable-diffusion-webui-two-shot/scripts/two_shot.py:397: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  canvas_image = gr.Image(source='upload', mirror_webcam=False, type='numpy', tool='color-sketch',\n",
            "/content/sdf_web/extensions/stable-diffusion-webui-two-shot/scripts/two_shot.py:471: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  visual_regions = gr.Gallery(label=\"Regions\").style(grid=(4, 4, 4, 8), height=\"auto\")\n",
            "/content/sdf_web/extensions/stable-diffusion-webui-two-shot/scripts/two_shot.py:471: GradioDeprecationWarning: The 'grid' parameter will be deprecated. Please use 'columns' in the constructor instead.\n",
            "  visual_regions = gr.Gallery(label=\"Regions\").style(grid=(4, 4, 4, 8), height=\"auto\")\n",
            "/content/sdf_web/extensions/sd-fast-pnginfo/scripts/fast-pnginfo.py:40: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  with gr.Row().style(equal_height=False):\n",
            "/content/sdf_web/extensions/sd-webui-additional-networks/scripts/metadata_editor.py:399: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  with gr.Row().style(equal_height=False):\n",
            "/content/sdf_web/extensions/sd-webui-additional-networks/scripts/metadata_editor.py:521: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  cover_image = gr.Image(\n",
            "/content/sdf_web/extensions/sd-webui-agent-scheduler/scripts/task_scheduler.py:297: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  gr.Gallery(\n",
            "/content/sdf_web/extensions/sd-webui-agent-scheduler/scripts/task_scheduler.py:325: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.\n",
            "  galerry = gr.Gallery(\n",
            "Running on local URL:  http://127.0.0.1:7860\n",
            "\n",
            "To create a public link, set `share=True` in `launch()`.\n",
            "[AgentScheduler] Task queue is empty\n",
            "[AgentScheduler] Registering APIs\n"
          ]
        }
      ],
      "source": [
        "#@markdown ## 1Ô∏è‚É£ Inicio\n",
        "fast_start = True #@param {type:\"boolean\"}\n",
        "output_to_drive = False #@param {type:\"boolean\"}\n",
        "#@markdown <br>\n",
        "\n",
        "#@markdown ### Descarga tus Modelos y Lora favoritos\n",
        "#@markdown *  ***`Escribe los enlaces separados por \",\"`***\n",
        "custom_urls = \"\" #@param {type:\"string\"}\n",
        "verbose_download = False #@param{type:\"boolean\"}\n",
        "model_url = \"\"\n",
        "#@markdown <br>\n",
        "\n",
        "anyLora = False #@param {type:\"boolean\"}\n",
        "ghostMix = False #@param {type:\"boolean\"}\n",
        "gostfeitV3 = True #@param{type:\"boolean\"}\n",
        "gostlycute = False #@param{type:\"boolean\"}\n",
        "meinaMix = False #@param{type:\"boolean\"}\n",
        "mothmix = True #@param{type:\"boolean\"}\n",
        "shadowGost = True #@param {type:\"boolean\"}\n",
        "#@markdown <br>\n",
        "controlnet = True\n",
        "\n",
        "#@markdown ### Extra\n",
        "latest_ext = True #@param {type:\"boolean\"}\n",
        "\n",
        "import re\n",
        "import os\n",
        "import sys\n",
        "import time\n",
        "import json\n",
        "import datetime\n",
        "import fileinput\n",
        "import shutil\n",
        "import requests\n",
        "import logging\n",
        "import subprocess\n",
        "from google.colab import drive\n",
        "from IPython.utils import capture\n",
        "from subprocess import getoutput\n",
        "from urllib.parse import unquote\n",
        "from datetime import datetime\n",
        "from datetime import timedelta\n",
        "from google.colab.output import eval_js\n",
        "\n",
        "# CONFIG DIR (not recommended to change unless you know what you're doing)\n",
        "destination_dir = \"/content/.downloaded/\"\n",
        "config_dir=\"/content/sdf_web/config.json\"\n",
        "models_dir = \"/content/sdf_web/models/Sd\"\n",
        "vaes_dir = \"/content/sdf_web/models/VAE\"\n",
        "hypernetworks_dir = \"/content/sdf_web/models/hypernetworks/\"\n",
        "embeddings_dir = \"/content/sdf_web/embeddings/\"\n",
        "loras_dir = \"/content/sdf_web/models/Lora\"\n",
        "patches_dir = \"/content/sdf_web/patches\"\n",
        "extensions_dir = \"/content/sdf_web/extensions/\"\n",
        "control_dir = \"/content/sdf_web/models/ControlNet\"\n",
        "drive_config_dir = \"/content/gdrive/MyDrive/WebUI/configs/\"\n",
        "source_dir = \"/content/sdf_web\"\n",
        "lycoris_dir = \"/content/sdf_web/models/LyCORIS\"\n",
        "# ---------------------------------------------------------------------\n",
        "\n",
        "if anyLora:\n",
        "   model_url+=\"https://civitai.com/models/23900/anylora-checkpoint, \"\n",
        "if ghostMix:\n",
        "   model_url+=\"https://civitai.com/models/36520/ghostmix, \"\n",
        "if gostfeitV3:\n",
        "   model_url+=\"https://huggingface.co/GeneralGost/sdf/resolve/main/testModels/Gostfeit_v3.safetensors, \"\n",
        "if gostlycute:\n",
        "   model_url+=\"https://civitai.com/models/127635/gostly-cute,\"\n",
        "if meinaMix:\n",
        "   model_url+=\"https://civitai.com/models/7240/meinamix, \"\n",
        "if mothmix:\n",
        "   model_url+=\"https://civitai.com/models/50041/mothmix, \"\n",
        "if shadowGost:\n",
        "   model_url+=\"https://civitai.com/models/128519/shadowgost, \"\n",
        "if controlnet:\n",
        "  model_url+=\"https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_canny-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_depth-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_hed-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_mlsd-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_normal-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_openpose-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_scribble-fp16.safetensors, https://huggingface.co/webui/ControlNet-modules-safetensors/resolve/main/control_seg-fp16.safetensors, \"\n",
        "\n",
        "if not os.path.exists(\"/content/sdf_web\"):\n",
        "  start_install = int(time.time())\n",
        "  print(\"üöÄ Descargando SD modificado por Generalgost... Por favor, no detengas este proceso bajo ninguna circunstancia...\\n\", end='')\n",
        "  with capture.capture_output() as cap:\n",
        "    %cd /content\n",
        "    # !pip install tntn && pip uninstall -y pydantic && pip install pydantic==1.8.2\n",
        "    !wget https://huggingface.co/NoCrypt/fast-repo/resolve/main/ubuntu_deps.zip ; unzip ubuntu_deps.zip -d ./deps ; dpkg -i ./deps/* ; rm -rf ubuntu_deps.zip /content/deps/\n",
        "    !echo -e \"https://huggingface.co/NoCrypt/fast-repo/resolve/main/dep.tar.lz4\\n\\tout=dep.tar.lz4\\nhttps://huggingface.co/GeneralGost/sdf/resolve/main/testVersions/sdf_web.tar.lz4\\n\\tout=sdf_web.tar.lz4\\nhttps://huggingface.co/NoCrypt/fast-repo/resolve/main/cache.tar.lz4\\n\\tout=cache.tar.lz4\\n\" \\\n",
        "      | aria2c -i- -j5 -x16 -s16 -k1M -c\n",
        "\n",
        "    !tar -xI lz4 -f dep.tar.lz4 --overwrite-dir --directory=/usr/local/lib/python3.10/dist-packages/ #(manual dir)\n",
        "    !tar -xI lz4 -f sdf_web.tar.lz4 --directory=/content #/content/sdf_web/ (auto dir)\n",
        "    !tar -xI lz4 -f cache.tar.lz4 --directory=/ #/root/.cache/huggingface (auto dir)\n",
        "\n",
        "    !rm -rf /content/sdf_web.tar.lz4 /content/cache.tar.lz4 /content/dep.tar.lz4 /content/mixLoras.zip\n",
        "    os.environ[\"SAFETENSORS_FAST_GPU\"]='1'\n",
        "    %env LD_PRELOAD=libtcmalloc.so\n",
        "  del cap\n",
        "else:\n",
        "  time_since_start = timedelta(seconds=time.time()-start_colab)\n",
        "# Colab ü§ù Gradio (Colab timer integration for gradio) by NoCrypt\n",
        "!echo -n {start_colab} > /content/sdf_web/static/colabTimer.txt\n",
        "\n",
        "# Update lastest Version 1.6.0\n",
        "!git config --global user.email \"you@example.com\"\n",
        "!git config --global user.name \"Your Name\"\n",
        "print('‚åö Extrayendo los √∫ltimos cambios...', end=\"\")\n",
        "with capture.capture_output() as cap:\n",
        "  %cd /content/sdf_web\n",
        "  !git restore .\n",
        "  !git pull -X theirs --rebase --autostash\n",
        "del cap\n",
        "\n",
        "!sed -i \"s@os.path.splitext(checkpoint_.*@os.path.splitext(checkpoint_file); map_location='cuda'@\" /content/sdf_web/modules/sd_models.py\n",
        "!sed -i 's@ui.create_ui().*@ui.create_ui();shared.demo.queue(concurrency_count=999999,status_update_rate=0.1)@' /content/sdf_web/webui.py\n",
        "\n",
        "\n",
        "# Descarga de modelos\n",
        "\n",
        "extension_repo = []\n",
        "prefixes = [\n",
        "  \"config:\",\n",
        "  \"ui-config:\",\n",
        "  \"styles:\",\n",
        "  \"lora:\",\n",
        "  \"hypernetwork:\",\n",
        "  \"locon:\",\n",
        "  \"lycoris:\",\n",
        "  \"model:\",\n",
        "  \"vae:\",\n",
        "  \"control:\",\n",
        "  \"clone:\",\n",
        "  \"gfpgan:\",\n",
        "  \"ersgan:\",\n",
        "  \"swinr:\",\n",
        "  \"ldsr:\",\n",
        "  \"repo:\",\n",
        "  \"embeddings:\"\n",
        "]\n",
        "token = \"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\"\n",
        "user_header = f\"\\\"Authorization: Bearer {token}\\\"\"\n",
        "print('üì¶ Descargando modelos y dem√°s...', end='')\n",
        "def handle_manual(url):\n",
        "  if url.startswith(\"config:\"):\n",
        "    manual_download(url, \"/content/sdf_web/config.json\")\n",
        "  elif url.startswith(\"ui-config:\"):\n",
        "    manual_download(url, \"/content/sdf_web/ui-config.json\")\n",
        "  elif url.startswith(\"styles:\"):\n",
        "    manual_download(url, \"/content/sdf_web/styles.csv\")\n",
        "  elif url.startswith(\"lora:\") or url.startswith(\"locon:\"):\n",
        "    manual_download(url, loras_dir)\n",
        "  elif url.startswith(\"lycoris:\"):\n",
        "    manual_download(url, lycoris_dir)\n",
        "  elif url.startswith(\"hypernetwork:\"):\n",
        "    manual_download(url, hypernetworks_dir)\n",
        "  elif url.startswith(\"model:\"):\n",
        "    manual_download(url, models_dir)\n",
        "  elif url.startswith(\"vae:\"):\n",
        "    manual_download(url, vaes_dir)\n",
        "  elif url.startswith(\"control:\"):\n",
        "    manual_download(url, control_dir)\n",
        "  elif url.startswith(\"gfpgan:\"):\n",
        "    manual_download(url, \"/content/sdf_web/models/GFPGAN\")\n",
        "  elif url.startswith(\"ersgan:\"):\n",
        "    manual_download(url, \"/content/sdf_web/models/ERSGAN\")\n",
        "  elif url.startswith(\"swinr:\"):\n",
        "    manual_download(url, \"/content/sdf_web/models/SwinR\")\n",
        "  elif url.startswith(\"ldsr:\"):\n",
        "    manual_download(url, \"/content/sdf_web/models/LDSR\")\n",
        "  elif url.startswith(\"embeddings:\"):\n",
        "    manual_download(url, embeddings_dir)\n",
        "  elif url.startswith(\"extension:\"):\n",
        "    extension_repo.append(url)\n",
        "  elif url.startswith(\"clone:\") or url.startswith(\"repo:\"):\n",
        "    !cd /content/.downloaded && git clone $url\n",
        "\n",
        "def manual_download(url, dst):\n",
        "  url = url[url.find(':')+1:]\n",
        "  if \".json\" in url or \".csv\" in url:\n",
        "    !wget \"{url}\" -O {dst} -c\n",
        "  elif '.yaml' in url or '.yml' in url or 'discord' in url:\n",
        "    !wget \"{url}\" -P {dst} -c\n",
        "  elif 'drive.google' in url:\n",
        "    if 'folders' in url:\n",
        "      !gdown --folder \"{url}\" -O {dst} --fuzzy -c\n",
        "    else:\n",
        "      !gdown \"{url}\" -O {dst} --fuzzy -c\n",
        "  elif 'huggingface' in url:\n",
        "    if '/blob/' in url:\n",
        "      url = url.replace('/blob/', '/resolve/')\n",
        "    parsed_link = '\\n{}\\n\\tout={}'.format(url,unquote(url.split('/')[-1]))\n",
        "    !echo -e \"{parsed_link}\" | aria2c --header={user_header} --console-log-level=error --summary-interval=10 -i- -j5 -x16 -s16 -k1M -c -d \"{dst}\"\n",
        "  elif 'http' in url or 'magnet' in url:\n",
        "    parsed_link = '\"{}\"'.format(url)\n",
        "    !aria2c --optimize-concurrent-downloads --console-log-level=error --summary-interval=10 -j5 -x16 -s16 -k1M -c -d {dst} -Z {parsed_link}\n",
        "\n",
        "def download(url):\n",
        "  try:\n",
        "    have_drive_link\n",
        "  except:\n",
        "    if \"drive.google.com\" in url:\n",
        "      # I'm sorry drive ID enjoyer, this will make ID useless :(\n",
        "      !pip install -U gdown\n",
        "      have_drive_link = True\n",
        "  links_and_paths = url.split(',')\n",
        "  !mkdir -p {destination_dir} {models_dir} {vaes_dir} {hypernetworks_dir} {embeddings_dir} {loras_dir} {lycoris_dir}\n",
        "  huggingface_links = []\n",
        "  civitai_links = []\n",
        "  http_links = []\n",
        "\n",
        "  for link_or_path in links_and_paths:\n",
        "    link_or_path = link_or_path.strip()\n",
        "    if not link_or_path:\n",
        "      continue\n",
        "\n",
        "    if any(link_or_path.startswith(prefix.lower()) for prefix in prefixes):\n",
        "      handle_manual(link_or_path)\n",
        "      continue\n",
        "\n",
        "    if 'github.com' in link_or_path and ( '.git' in link_or_path or not '.' in link_or_path.split('/')[-1] ):\n",
        "      extension_repo.append(link_or_path)\n",
        "      continue\n",
        "    if 'civitai'or 'https://civitai.com/api/' in link_or_path or 'https://civitai.com/models/' in link_or_path:\n",
        "      civitai_links.append(link_or_path)\n",
        "      # print(f\"\\n{civitai_links}\")\n",
        "    if '.yaml' in link_or_path or '.yml' in link_or_path or 'discord' in link_or_path:\n",
        "      !wget {link_or_path} -P {destination_dir} -c\n",
        "    elif 'drive.google' in link_or_path:\n",
        "      if 'folders' in link_or_path:\n",
        "        !gdown --folder {link_or_path} -O {destination_dir} --fuzzy -c\n",
        "      else:\n",
        "        !gdown {link_or_path} -O {destination_dir} --fuzzy -c\n",
        "    elif 'huggingface' in link_or_path:\n",
        "      if '/blob/' in link_or_path:\n",
        "        link_or_path = link_or_path.replace('/blob/', '/resolve/')\n",
        "      huggingface_links.append(link_or_path)\n",
        "    # elif '/' in link_or_path:\n",
        "    #   if not os.path.exists('/content/gdrive/MyDrive'):\n",
        "    #     print('Looks like there\\'s a path in your url. You need to mount your drive first.')\n",
        "    #     from google.colab import drive\n",
        "    #     drive.mount('/content/gdrive')\n",
        "    #   !rsync -avr --progress /content/gdrive/MyDrive/{link_or_path} {destination_dir}\n",
        "    # else:\n",
        "    #   !gdown {link_or_path} -O {destination_dir} --fuzzy -c\n",
        "    if huggingface_links:\n",
        "      links_string = '\\n'.join(['{}\\n\\tout={}'.format(x,unquote(x.split('/')[-1])) for x in huggingface_links])\n",
        "      !echo -e \"{links_string}\" | aria2c --header={user_header} --optimize-concurrent-downloads --console-log-level=error --summary-interval=10 -i- -j5 -x16 -s16 -k1M -c -d {destination_dir}\n",
        "\n",
        "  if civitai_links:\n",
        "      civitai_hashtag = []\n",
        "      civitai_normal = []\n",
        "      modelo_ids = []\n",
        "      for enlace in civitai_links:\n",
        "        enlace = enlace.strip()  # Eliminar espacios en blanco al inicio y final del enlace\n",
        "\n",
        "        if enlace.startswith(\"#\"):\n",
        "            civitai_hashtag.append(enlace)\n",
        "        elif \"api\" not in enlace:\n",
        "            civitai_normal.append(enlace)\n",
        "\n",
        "        # Imprimir los resultados\n",
        "      print(f\"\\n Enlaces con hashtag:{civitai_hashtag}\")\n",
        "      print(f\"\\n Enlaces sin hashtag ni 'api':{civitai_normal}\")\n",
        "\n",
        "      tags = {\n",
        "          '#embed': embeddings_dir,\n",
        "          '#model': models_dir,\n",
        "          '#hypernet': hypernetworks_dir,\n",
        "          '#lora': loras_dir,\n",
        "          '#vae': vaes_dir,\n",
        "          '#addnetlora': loras_dir,\n",
        "          '#lyco': lycoris_dir\n",
        "          # Agrega aqu√≠ m√°s hashtags y directorios correspondientes\n",
        "      }\n",
        "\n",
        "      if civitai_hashtag:\n",
        "        print(f'\\n Enlaces con hashtag{civitai_hashtag}')\n",
        "        download = False\n",
        "        while not download:\n",
        "          for enlace in civitai_hashtag:\n",
        "              hashtags = [ht.strip() for ht in enlace.split() if ht.startswith('#')]\n",
        "              # print(hashtags)\n",
        "              if hashtags:\n",
        "                  hashtag = hashtags[0]\n",
        "                  if hashtag in tags:\n",
        "                        directorio = tags[hashtag]\n",
        "                        enlace_formateado = enlace.replace(hashtag, '')\n",
        "                        filename = enlace_formateado.split('/')[-1].strip()\n",
        "                        filepath = directorio\n",
        "\n",
        "                        print(f\"\\n Enlace de descarga: {enlace_formateado}\")\n",
        "                        print(f\"\\n Directorio:{filepath}\")\n",
        "                        os.system(f'aria2c -x16 -s16 -k1M {enlace_formateado} --content-disposition -d {filepath}')\n",
        "                        download = True\n",
        "\n",
        "      if civitai_normal:\n",
        "          def obtener_ids_enlaces(civitai_normal):\n",
        "            ids = []\n",
        "            for enlace in civitai_normal:\n",
        "                modelo_id_match = re.search(r'/(\\d+)/', enlace)  # Buscar el ID num√©rico en el enlace\n",
        "                if modelo_id_match:\n",
        "                    modelo_id = modelo_id_match.group(1)  # Obtener el ID num√©rico encontrado\n",
        "                    ids.append(modelo_id)  # Almacenar el ID en la lista 'ids'\n",
        "                    id_num = list(map(int, ids))\n",
        "            return ids\n",
        "\n",
        "          def obtener_datos_modelo(modelo_id):\n",
        "            url = f'https://civitai.com/api/v1/models/{modelo_id}'\n",
        "            headers = {\"Content-Type\": \"application/json\"}\n",
        "            response = requests.get(url, headers=headers)\n",
        "            data = response.json()  # Obtener los datos de la respuesta en formato JSON\n",
        "            return data\n",
        "\n",
        "          def civitai_download(civitai_normal):\n",
        "            modelo_ids = obtener_ids_enlaces(civitai_normal)  # Obtener los IDs de los enlaces\n",
        "            try:\n",
        "              for modelo_id in modelo_ids:\n",
        "                  model_download = False\n",
        "                  while not model_download:\n",
        "                    datos_modelo = obtener_datos_modelo(modelo_id)  # Obtener los datos del modelo\n",
        "\n",
        "                    m_type = datos_modelo['type']\n",
        "                    modelVersions = datos_modelo['modelVersions']\n",
        "\n",
        "                    if modelVersions:\n",
        "                        modelVersion = modelVersions[0]\n",
        "                        downloadUrl = modelVersion['downloadUrl']\n",
        "                        img = modelVersion['images'][0]['url']\n",
        "                        name_img = datos_modelo['modelVersions'][0]['files'][0]['name']\n",
        "                        name_img = re.sub(r'\\.\\w+$', '.jpg', name_img)\n",
        "\n",
        "                        print(f\"\\n Type: {m_type}\")\n",
        "                        print(f\"\\n downloadUrl: {downloadUrl}\")\n",
        "                        print(f\"\\n images: {img}\")\n",
        "                        print(f\"\\n name img: {name_img}\")\n",
        "                    if m_type == \"LORA\":\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {downloadUrl} --content-disposition -d {loras_dir}\")\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {img} -d {loras_dir} -o {name_img}\")\n",
        "\n",
        "                    elif m_type == \"Checkpoint\":\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {downloadUrl} --content-disposition -d {models_dir}\")\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {img} -d {models_dir} -o {name_img}\")\n",
        "                    elif m_type == \"TextualInversion\":\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {downloadUrl} --content-disposition -d {embeddings_dir}\")\n",
        "                        os.system(\n",
        "                            f'aria2c -x16 -s16 -k1M {img} -d {embeddings_dir} -o {name_img}')\n",
        "                    elif m_type == \"LoCon\":\n",
        "                        os.system(\n",
        "                            f\"aria2c -j5 -x16 -s16 -k1M {downloadUrl} --content-disposition -d {lycoris_dir}\")\n",
        "                        os.system(\n",
        "                            f'aria2c -x16 -s16 -k1M {img} -d {lycoris_dir} -o {name_img}')\n",
        "                    model_download = True\n",
        "            except Exception as e:\n",
        "              print(e)\n",
        "          civitai_download(civitai_normal)\n",
        "\n",
        "if verbose_download:\n",
        "    download(model_url)\n",
        "else:\n",
        "  with capture.capture_output() as cap:\n",
        "      download(model_url)\n",
        "  del cap\n",
        "print('\\rüèÅ Descarga Completada.', flush=True)\n",
        "# Enlaza todos los archivos filtr√°ndolos seg√∫n su tipo\n",
        "with capture.capture_output() as cap:\n",
        "  files = [os.path.join(dp,f) for dp, dn, fn in os.walk(destination_dir) for f in fn]\n",
        "  for file in files:\n",
        "    name, file_extension = os.path.splitext(file)\n",
        "    if '.aria2' in file:\n",
        "      continue\n",
        "    file_path = os.path.join(destination_dir, file)\n",
        "    file_size = os.path.getsize(file_path)\n",
        "    if \"control_\" in name or \"t2iadapter_\" in name or file_extension == \".pth\":\n",
        "      !ln \"{file_path}\" {control_dir}\n",
        "    elif file_extension in ['.yaml', '.yml'] or file_size > 1_500_000_000:\n",
        "      !ln \"{file_path}\" {models_dir}\n",
        "    elif \"kl-f8\" in name or \"vae\" in file or 'Anything-V3' in file or \"vae.\" in file or \"vae-\" in file or 'vae_' in file or 'SomethingV2_2' in file or file_size > 380_000_000:\n",
        "      !ln \"{file_path}\" {vaes_dir}\n",
        "    elif getoutput('if rg -q -o \"lora_unet\" \"'+file_path+'\"; then echo 1; else echo 0; fi') == \"1\":\n",
        "      !ln \"{file_path}\" {loras_dir}\n",
        "    elif (file_extension == '.pt' or file_extension == '.safetensors') and file_size < 10_000_000:\n",
        "      !ln \"{file_path}\" {embeddings_dir}\n",
        "    else:\n",
        "      !ln \"{file_path}\" {hypernetworks_dir}\n",
        "  del cap\n",
        "\n",
        "# Image outputs to drive (part 2)\n",
        "if output_to_drive:\n",
        "    !sed -i 's@\"outdir_txt2img_samples\": \"outputs/txt2img-images\"@\"outdir_txt2img_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/txt2img-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_img2img_samples\": \"outputs/img2img-images\"@\"outdir_img2img_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/img2img-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_extras_samples\": \"outputs/extras-images\"@\"outdir_extras_samples\": \"/content/gdrive/MyDrive/WebUI/outputs/extras-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_txt2img_grids\": \"outputs/txt2img-grids\"@\"outdir_txt2img_grids\": \"/content/gdrive/MyDrive/WebUI/outputs/txt2img-grids\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_img2img_grids\": \"outputs/img2img-grids\"@\"outdir_img2img_grids\": \"/content/gdrive/MyDrive/WebUI/outputs/img2img-grids\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_save\": \"log/images\"@\"outdir_save\": \"/content/gdrive/MyDrive/WebUI/outputs/log/images\"@' {config_dir}\n",
        "else:\n",
        "  if '/gdrive/' in getoutput('cat '+config_dir):\n",
        "    !sed -i 's@\"outdir_txt2img_samples\": \"outputs/txt2img-images\"@\"outdir_txt2img_samples\": \"outputs/txt2img-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_img2img_samples\": \"outputs/img2img-images\"@\"outdir_img2img_samples\": \"outputs/img2img-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_extras_samples\": \"outputs/extras-images\"@\"outdir_extras_samples\": \"outputs/extras-images\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_txt2img_grids\": \"outputs/txt2img-grids\"@\"outdir_txt2img_grids\": \"outputs/txt2img-grids\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_img2img_grids\": \"outputs/img2img-grids\"@\"outdir_img2img_grids\": \"outputs/img2img-grids\"@' {config_dir}\n",
        "    !sed -i 's@\"outdir_save\": \"log/images\"@\"outdir_save\": \"log/images\"@' {config_dir}\n",
        "\n",
        "%cd /content/sdf_web\n",
        "if fast_start:\n",
        "  # commandline_arguments += \" --skip-install\"\n",
        "  print(\"\\033[91m ‚ö†Ô∏è Fast start is active, please disable it if you have any problem!\\033[0m\")\n",
        "  !python webui.py $commandline_arguments\n",
        "else:\n",
        "  !COMMANDLINE_ARGS=\"{commandline_arguments}\" REQS_FILE=\"requirements_versions.txt\" python launch.py\n",
        "time_since_start = timedelta(seconds=time.time()-start_colab)\n",
        "print(\"\\n\\n\\033[96m‚åö Ha estado ejecutado este colab por \",\"%02d:%02d:%02d\" % (time_since_start.seconds / 3600, (time_since_start.seconds / 60) % 60, time_since_start.seconds % 60))\n",
        "print(\"\\n\\n\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO9x5K9cOPT7Nqs8hE5H0rq",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}